{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "235052c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6523e17f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "722629d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_california_housing():\n",
    "    dataset = fetch_california_housing()\n",
    "    df = pd.DataFrame(dataset.data, columns = dataset.feature_names)\n",
    "    df['MedHouseVal'] = dataset.target\n",
    "    df.index.name = 'record'\n",
    "    X = df.loc[:, df.columns != 'MedHouseVal']\n",
    "    y = df['MedHouseVal']\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(df.loc[:, df.columns != 'MedHouseVal'],\n",
    "                                                        df['MedHouseVal'], test_size = .33, random_state = 42)\n",
    "    \n",
    "    return(X, y, X_train, X_test, y_train, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6853cca3",
   "metadata": {},
   "source": [
    "# 선형회귀, Lasso 회귀, Ridge 회귀의 성능 비교"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f5770152",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r2 score of LinearRegression() is = 0.59705\n",
      "r2 score of Lasso(alpha=0.3) is = 0.48944\n",
      "r2 score of Ridge(alpha=0.3) is = 0.59706\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression, Lasso, Ridge\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "X, y, X_train, X_test, y_train, y_test = get_california_housing()\n",
    "\n",
    "for clf in [LinearRegression(), Lasso(alpha = 0.3), Ridge(alpha = 0.3)]:\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    print('r2 score of {} is = '.format(clf) + str(round(r2,5)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa9c0d1c",
   "metadata": {},
   "source": [
    "## (1) 데이터셋을 적합시킨 후 가장 큰 결정계수를 지닌 값은 Ridge 모형이다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11e79f18",
   "metadata": {},
   "source": [
    "# Lasso regression 에서 0이 되는 회귀계수의 수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "01ac5645",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the number of coefficients with 0 is = 4\n"
     ]
    }
   ],
   "source": [
    "clf = Lasso(alpha = 0.3)\n",
    "clf.fit(X_train, y_train)\n",
    "print('the number of coefficients with 0 is =', np.sum(clf.coef_ == 0))\n",
    "\n",
    "# np.count : 문장에서 a가 몇개 나오는지 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "163247fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3.45973383e-01,  1.45127459e-02, -0.00000000e+00,  0.00000000e+00,\n",
       "        2.16014926e-05, -1.72904861e-03, -0.00000000e+00, -0.00000000e+00])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f7d0ac4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import RidgeCV\n",
    "from sklearn.linear_model import LassoCV"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87b4c2f5",
   "metadata": {},
   "source": [
    "# 수축 파라미터 값에 따른 회귀 성능 (r2)의 변화 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "911b6e41",
   "metadata": {},
   "outputs": [],
   "source": [
    "alphas = np.arange(0,500,0.1)\n",
    "lamda = np.array([])\n",
    "rscore = np.array([])\n",
    "for i in [3,4,5,6,7]:\n",
    "    cv = RidgeCV(alphas = alphas, cv = i).fit(X, y)\n",
    "    lamda = np.append(lamda, cv.alpha_)\n",
    "    clf = Ridge(alpha = cv.alpha_).fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    rscore = np.append(rscore, r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "8ae5c074",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  0.   35.9  81.5 196.1 161.1]\n",
      "각 cv에 따른 최적의 shirinkage parameter 값\n"
     ]
    }
   ],
   "source": [
    "print(lamda)\n",
    "print(\"각 cv에 따른 최적의 shirinkage parameter 값\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "9c51ef9f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = np.arange(0,500,0.1)\n",
    "r2_arr = np.array([])\n",
    "score = np.array([])\n",
    "cvscore = np.array([])\n",
    " \n",
    "for i in a:\n",
    "    clf = Ridge(alpha = i)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    r2_arr = np.append(r2_arr, r2)\n",
    "\n",
    "for j in [3,4,5,6,7]:\n",
    "    for i in a:\n",
    "        clf = Ridge(alpha = i)\n",
    "        scores = cross_val_score(clf, X, y, cv=j)\n",
    "        score = np.append(score, scores.mean())\n",
    "    plt.figure(figsize = (10,5))\n",
    "    plt.subplot(5,1,j-2)\n",
    "    plt.plot(a, score, 'r')\n",
    "    plt.xlabel('shrinkage parameter')\n",
    "    plt.ylabel('accuracy')\n",
    "    plt.scatter(lamda[j-3], score[a == lamda[j-3]])\n",
    "    plt.show()\n",
    "    cvscore = np.append(cvscore, score)\n",
    "    score = np.array([])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c993956e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When cv is 3, efficient alpha is 0 and then accuarcy 0.5970494128783952\n"
     ]
    }
   ],
   "source": [
    "alphas = np.arange(0,500,0.1)\n",
    "cv = RidgeCV(alphas = alphas, cv = 3).fit(X, y)\n",
    "lamda = cv.alpha_\n",
    "clf = Ridge(alpha = lamda)\n",
    "clf.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(\"When cv is 3, efficient alpha is %d and then score %s\" % (lamda, r2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "87cd109c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When cv is 4, efficient alpha is 35.9 and then accuarcy 0.5983980955744326\n"
     ]
    }
   ],
   "source": [
    "alphas = np.arange(0,500,0.1)\n",
    "cv = RidgeCV(alphas = alphas, cv = 4).fit(X, y)\n",
    "lamda = cv.alpha_\n",
    "clf = Ridge(alpha = lamda)\n",
    "clf.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(\"When cv is 4, efficient alpha is %s and then score %s\" % (lamda, r2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "28b03a95",
   "metadata": {},
   "outputs": [],
   "source": [
    "def divide_array(array, chunk_size):\n",
    "    divided_arrays = []\n",
    "    for i in range(0, len(array), chunk_size):\n",
    "        divided_arrays.append(array[i:i+chunk_size])\n",
    "    return divided_arrays\n",
    "\n",
    "# 25000개의 요소를 가진 배열\n",
    "array = [i for i in range(25000)]\n",
    "chunk_size = 5000\n",
    "\n",
    "# 배열을 분할\n",
    "cvscores = divide_array(cvscore, chunk_size)\n",
    "\n",
    "mlam = np.array([])\n",
    "for i in range(5):\n",
    "    mlam = np.append(mlam, a[cvscores[i]==max(cvscores[i])])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "739656b9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = np.arange(0,500,0.1)\n",
    "rmax = a[r2_arr == max(r2_arr)]\n",
    "plt.figure(figsize = (10,5))\n",
    "plt.plot(a, r2_arr, 'r')\n",
    "plt.xlabel('shrinkage parameter')\n",
    "plt.ylabel('r2')\n",
    "for i in range(5):\n",
    "    plt.scatter(lamda[i], r2_arr[a == lamda[i]][0])\n",
    "    plt.text(lamda[i]-20, r2_arr[a == lamda[i]][0] + 0.0001, 'cv = ' + str(i+2), fontsize = 12)\n",
    "\n",
    "plt.scatter(a[r2_arr == max(r2_arr)], max(r2_arr))\n",
    "plt.text(round(a[r2_arr == max(r2_arr)][0] - 20,1), max(r2_arr) + 0.0001, 'max =' + str(rmax), fontsize = 12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "eb5683f3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "각 cv에 따른 accuracy가 최대가 되는 Shrinkage parameter 값 [  0.   35.9  81.5 196.1 161.1]\n"
     ]
    }
   ],
   "source": [
    "print(\"각 cv에 따른 accuracy가 최대가 되는 Shrinkage parameter 값\", mlam)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "38cc6b69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "최적의 shirinkage는 accuaracy도 최대가 된다.\n"
     ]
    }
   ],
   "source": [
    "sum(lamda == mlam)\n",
    "print(\"최적의 parameter와 가장 큰 parameter가 같다. 따라서 최적의 shirinkage일 때 accuaracy도 최대가 된다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "517bba85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When shirnkage parameter is 261.400000, r2_score is max\n"
     ]
    }
   ],
   "source": [
    "rmax = a[r2_arr == max(r2_arr)]\n",
    "print(\"When shirnkage parameter is %f, r2_score is max\" % (rmax))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "ee462c9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "But where the lamda locate eiffcient lamda, r2 is not max r2\n"
     ]
    }
   ],
   "source": [
    "print(\"But where the shrinkage parameter locate eiffcient parameter, r2 score is not max\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "789c862b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When shrinkage parameter is 0 , max accuracy is 0.576282 and then cv is 3\n"
     ]
    }
   ],
   "source": [
    "index = np.array([a[score1 == max(score1)],a[score2 == max(score2)],a[score3 == max(score3)],a[score4 == max(score4)],a[score5 == max(score5)]])\n",
    "scores = np.array([max(score1),max(score2),max(score3),max(score4),max(score5)])\n",
    "maxscore = max(scores)\n",
    "lamda = index[scores == max(scores)]\n",
    "cv = np.array([3,4,5,6,7])\n",
    "print(\"When shrinkage parameter is %d , max accuracy is %f and then cv is %d\" % (lamda, maxscore, cv[scores == maxscore]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d0a9ebe7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When shrinkage parameter is 35.900000 , max accuracy is 0.5556690204042105 and then cv is 4\n"
     ]
    }
   ],
   "source": [
    "index = np.array([a[score2 == max(score2)],a[score3 == max(score3)],a[score4 == max(score4)],a[score5 == max(score5)]])\n",
    "scores = np.array([max(score2),max(score3),max(score4),max(score5)])\n",
    "maxscore = max(scores)\n",
    "lamda = index[scores == max(scores)]\n",
    "cv = np.array([4,5,6,7])\n",
    "print(\"When shrinkage parameter is %f , max accuracy is %s and then cv is %d\" % (lamda, maxscore, cv[scores == maxscore]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "f5db74a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.] [35.9] [81.5] [196.1] [161.1]\n"
     ]
    }
   ],
   "source": [
    "print(a[score1 == max(score1)], a[score2 == max(score2)], a[score3 == max(score3)], a[score4 == max(score4)], a[score5 == max(score5)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b067b27",
   "metadata": {},
   "source": [
    "## Ridge regression의 제약 조건이 작을 때 결정계수가 낮은 이유는 과적합이 됨에 따라 회귀 성능이 낮아졌으며 적당치를 넘어서 제약 조건이 클 때 결정계수가 낮은 이유는 변수가 많아짐에 따라 학습오차가 커졌기 때문이다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e7b62bc1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When cv is 5, efficient alpha is 0.032211 and then score 0.28450867788418377\n"
     ]
    }
   ],
   "source": [
    "alphas = np.arange(0.001,1,0.001)\n",
    "lassocv = LassoCV(cv=5).fit(X, y)\n",
    "lamda = lassocv.alpha_\n",
    "lasso = Lasso()\n",
    "lasso.fit(X_train, y_train)\n",
    "y_pred = lasso.predict(X_test)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(\"When cv is 5, efficient alpha is %f and then score %s\" % (lamda, r2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "af708f71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.03"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(lamda,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9fb5eeb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = np.arange(0.001,2,0.001)\n",
    "r2_arr = np.array([])\n",
    "\n",
    "for i in a:\n",
    "    clf = Lasso(i).fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    r2_arr = np.append(r2_arr, r2)\n",
    "\n",
    "plt.figure(figsize = (10, 10))\n",
    "plt.plot(a, r2_arr, 'r')\n",
    "plt.xlabel('shrinkage parameter')\n",
    "plt.ylabel('r2')\n",
    "plt.scatter(lamda, r2_arr[a == round(lamda,3)][0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "a4a901b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5900632901650504"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_arr[a == round(lamda,3)][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "4c75451a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When shrinkage parameter is 0.008 , r2_score is max\n",
      "When shrinkage parameter is efficient shrinkage parameter , r2_score is 0.590\n"
     ]
    }
   ],
   "source": [
    "lassomax = a[r2_arr == max(r2_arr)]\n",
    "print(\"When shrinkage parameter is %.3f , r2_score is max\" % (lassomax))\n",
    "print(\"When shrinkage parameter is efficient shrinkage parameter , r2 score is %.3f\" % (r2_arr[a == round(lamda,3)][0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86e8bdd8",
   "metadata": {},
   "source": [
    "## (2) lasso regresssion의 shrinkage parameter 값이 많아지면 회귀 계수들이 많이짐에 따라 각각의 회귀계수들은 0에 가까워 지기 때문에 적합도가 감소하게 된다."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
